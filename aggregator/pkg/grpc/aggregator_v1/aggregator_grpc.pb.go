// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: aggregator.proto

package aggregator_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Aggregator_CustomerGet_FullMethodName   = "/aggregator_v1.Aggregator/CustomerGet"
	Aggregator_CustomerList_FullMethodName  = "/aggregator_v1.Aggregator/CustomerList"
	Aggregator_ApartmentGet_FullMethodName  = "/aggregator_v1.Aggregator/ApartmentGet"
	Aggregator_ApartmentList_FullMethodName = "/aggregator_v1.Aggregator/ApartmentList"
	Aggregator_BookingGet_FullMethodName    = "/aggregator_v1.Aggregator/BookingGet"
	Aggregator_BookingList_FullMethodName   = "/aggregator_v1.Aggregator/BookingList"
)

// AggregatorClient is the client API for Aggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorClient interface {
	CustomerGet(ctx context.Context, in *CustomerGetRequest, opts ...grpc.CallOption) (*CustomerGetResponse, error)
	CustomerList(ctx context.Context, in *CustomerListRequest, opts ...grpc.CallOption) (*CustomerListResponse, error)
	ApartmentGet(ctx context.Context, in *ApartmentGetRequest, opts ...grpc.CallOption) (*ApartmentGetResponse, error)
	ApartmentList(ctx context.Context, in *ApartmentListRequest, opts ...grpc.CallOption) (*ApartmentListResponse, error)
	BookingGet(ctx context.Context, in *BookGetRequest, opts ...grpc.CallOption) (*BookGetResponse, error)
	BookingList(ctx context.Context, in *BookListRequest, opts ...grpc.CallOption) (*BookListResponse, error)
}

type aggregatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorClient(cc grpc.ClientConnInterface) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) CustomerGet(ctx context.Context, in *CustomerGetRequest, opts ...grpc.CallOption) (*CustomerGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerGetResponse)
	err := c.cc.Invoke(ctx, Aggregator_CustomerGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) CustomerList(ctx context.Context, in *CustomerListRequest, opts ...grpc.CallOption) (*CustomerListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CustomerListResponse)
	err := c.cc.Invoke(ctx, Aggregator_CustomerList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) ApartmentGet(ctx context.Context, in *ApartmentGetRequest, opts ...grpc.CallOption) (*ApartmentGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApartmentGetResponse)
	err := c.cc.Invoke(ctx, Aggregator_ApartmentGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) ApartmentList(ctx context.Context, in *ApartmentListRequest, opts ...grpc.CallOption) (*ApartmentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApartmentListResponse)
	err := c.cc.Invoke(ctx, Aggregator_ApartmentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) BookingGet(ctx context.Context, in *BookGetRequest, opts ...grpc.CallOption) (*BookGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookGetResponse)
	err := c.cc.Invoke(ctx, Aggregator_BookingGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) BookingList(ctx context.Context, in *BookListRequest, opts ...grpc.CallOption) (*BookListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookListResponse)
	err := c.cc.Invoke(ctx, Aggregator_BookingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorServer is the server API for Aggregator service.
// All implementations must embed UnimplementedAggregatorServer
// for forward compatibility.
type AggregatorServer interface {
	CustomerGet(context.Context, *CustomerGetRequest) (*CustomerGetResponse, error)
	CustomerList(context.Context, *CustomerListRequest) (*CustomerListResponse, error)
	ApartmentGet(context.Context, *ApartmentGetRequest) (*ApartmentGetResponse, error)
	ApartmentList(context.Context, *ApartmentListRequest) (*ApartmentListResponse, error)
	BookingGet(context.Context, *BookGetRequest) (*BookGetResponse, error)
	BookingList(context.Context, *BookListRequest) (*BookListResponse, error)
	mustEmbedUnimplementedAggregatorServer()
}

// UnimplementedAggregatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregatorServer struct{}

func (UnimplementedAggregatorServer) CustomerGet(context.Context, *CustomerGetRequest) (*CustomerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerGet not implemented")
}
func (UnimplementedAggregatorServer) CustomerList(context.Context, *CustomerListRequest) (*CustomerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CustomerList not implemented")
}
func (UnimplementedAggregatorServer) ApartmentGet(context.Context, *ApartmentGetRequest) (*ApartmentGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApartmentGet not implemented")
}
func (UnimplementedAggregatorServer) ApartmentList(context.Context, *ApartmentListRequest) (*ApartmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApartmentList not implemented")
}
func (UnimplementedAggregatorServer) BookingGet(context.Context, *BookGetRequest) (*BookGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingGet not implemented")
}
func (UnimplementedAggregatorServer) BookingList(context.Context, *BookListRequest) (*BookListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookingList not implemented")
}
func (UnimplementedAggregatorServer) mustEmbedUnimplementedAggregatorServer() {}
func (UnimplementedAggregatorServer) testEmbeddedByValue()                    {}

// UnsafeAggregatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorServer will
// result in compilation errors.
type UnsafeAggregatorServer interface {
	mustEmbedUnimplementedAggregatorServer()
}

func RegisterAggregatorServer(s grpc.ServiceRegistrar, srv AggregatorServer) {
	// If the following call pancis, it indicates UnimplementedAggregatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Aggregator_ServiceDesc, srv)
}

func _Aggregator_CustomerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).CustomerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_CustomerGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).CustomerGet(ctx, req.(*CustomerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_CustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).CustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_CustomerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).CustomerList(ctx, req.(*CustomerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_ApartmentGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApartmentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).ApartmentGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_ApartmentGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).ApartmentGet(ctx, req.(*ApartmentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_ApartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApartmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).ApartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_ApartmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).ApartmentList(ctx, req.(*ApartmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_BookingGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).BookingGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_BookingGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).BookingGet(ctx, req.(*BookGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_BookingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).BookingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aggregator_BookingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).BookingList(ctx, req.(*BookListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aggregator_ServiceDesc is the grpc.ServiceDesc for Aggregator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aggregator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregator_v1.Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CustomerGet",
			Handler:    _Aggregator_CustomerGet_Handler,
		},
		{
			MethodName: "CustomerList",
			Handler:    _Aggregator_CustomerList_Handler,
		},
		{
			MethodName: "ApartmentGet",
			Handler:    _Aggregator_ApartmentGet_Handler,
		},
		{
			MethodName: "ApartmentList",
			Handler:    _Aggregator_ApartmentList_Handler,
		},
		{
			MethodName: "BookingGet",
			Handler:    _Aggregator_BookingGet_Handler,
		},
		{
			MethodName: "BookingList",
			Handler:    _Aggregator_BookingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregator.proto",
}
